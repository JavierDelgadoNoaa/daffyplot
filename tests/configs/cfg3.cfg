[dataset_names]
# These will be used in the legend entries. The variable names
# here are merely for human readability, they have no impact on how the
# data is read. But the number of variables here should be equal
# to the number of data_paths, plot_colors, and line_styles
ds1 = coldstart
ds2 = gsi1
ds3 = enkf1
ds3b = enkf2

[data_paths]
# These are the paths to the directories containing the data corresponding to
# the datasets in [dataset_names].
# If using the DAFFY directory structure, this should be the 'run' directory
#exp1 = '/foo/bar/gsi/run'
#exp2 = '/foo/bar/enkf/run'
r1 = ./sample_datasets/1cs1gsi2enkf_1/coldstart1
r2 = ./sample_datasets/1cs1gsi2enkf_1/gsi1
r3 = ./sample_datasets/1cs1gsi2enkf_1/enkf1
r3b = ./sample_datasets/1cs1gsi2enkf_1/enkf2

[plot_colors]
# This is passed directly to plot()...
# Should be either the string or the 6-digit hex code. Hex code may be wrapped in quotes to 
# prevent syntax highlighting from treating it as a comment. The code will not treat it as
# a comment
c1 = '#A0A0A0'
c2 = green
c3 = '#33CCFF'
c3_dontMatter = #33CCFF

[line_styles]
# passed directly to plot(). See MatplotLib line styles for available styles
s1 = -
s1b = -
s2 = -
s2b = --

[basic_settings]
# Should be 0-50 or CRITICAL, FATAL, ERROR, WARN, INFO, DEBUG. Higher number = less logging
log_level = DEBUG
# This is put here under the assumption that different data sources may be desirable some day.
# The only supported value is currently daffy_calculate
value_source = daffy_calculate
# Start/End date of data to plot. Averages will be calculated based on this range. 
# Should be "MM-DD-YYYY HH:MM"
start_date = 08-01-2005 06:00
end_date = 08-01-2005 06:00
# How often we cycle, in (fractions of) hours
# This is the value that will be used when creating the plots whether using precalculated
# values in text file or when calculating the values. **HOWEVER, if using precalculated
# averages, it will blindly use the values regardless of the experiment's  cycle frequency.**
cycle_frequency = 6
# How many (fractions of) forecast *hours* to calculate for.
# TODO : also enforce this for plotting when reading from a file
forecast_duration = 120
# How often do we run forecasts? (in hours)
forecast_frequency = %(cycle_frequency)s
# How often does the model output (in hours)? This should correspond to the number of entries in the tracker output files
history_interval = 6
# Which tracker to use for retrieving TC stats (currently only 'diapost' is supported)
tracker = diapost

[data_settings]
# If set to True, entries flagged by the tracker will be plotted in the figures, with cirles to indicate the data point is flagged.
plot_flagged_tracker_entries = False
# If True, annotate the points in the average TC stats plots with the number of 
# unflagged entries. To keep the figures as clear as possible, the intensity
# of the annotation text will be proportional to the number of flagged entries
annotate_unflagged_entries = True
# If True, flagged tracker entries will be used in the calculation of averages
include_flagged_tracker_entries_in_average = False
# Tracker data to use for _nature run_ TC stats (either "nolan" or "gfdl"). 
# Will be used as the "truth" value for all TCV stats related plots.
nature_run_tracker = nolan
# Path to the "truth" track data.
# truth_tracker_data_file = /lfs1/projects/hur-aoml/lbucci/meso_osse/wrf-arw/atcf/atcfNRD03.txt
truth_tracker_data_file = ./sample_datasets/1cs1gsi2enkf_1/atcfNRD03.txt
# Set various file and directory names (this could be moved to a separate config file since it is basically static).
# As long as the DAFFY experiment was not run in a customized configuration, these can be left as is.
output_file_prefix = ''
# Prefix of subdirectory where products can be found
products_directory_prefix = PRODUCTS.
# Subdirectory where TC Vitals statistics are
stats_directory_name = tc_stats
# Pregenerated file with TC error statistics
pregenerated_stats_file_name = error.txt 
# Tracker output file name
tracker_data_file_name = fcst_track.d02.txt

[plot_settings]
# Values to use on the x axis for scripts that plot time vs some value
# acceptable values: fhr, epoch_zeta
# Note: This only affects the value displayed, not the value used. So if the script
#       plots MSLP versus forecast hour (fhr), it will show the value versus the fhr,
#       but will either show the fhr or the epoch time or whatever is set here
# Note also: This may be overriden where it does not make sense. e.g. if 
# plotting average error, the epoch_zeta cannot be used because the wall clock time 
# corresponding to the forecast lead time is different for each cycle
time_axis_parameter = fhr
# legend/fig_legend position (best, lower right, upper left, etc.)
legend_position = best 
# alpha value for the legend (i.e. level of transparency)
legend_alpha = 0.6
# If True, plot nature run values (using values in `truth_tracker_data_file`), where appropriate
plot_nature_values = True
# Settings for nature line
nature_line_color = black
nature_line_style = -
# Add a gray line at y=0 ; WARN: Could result in funny plots if values are far from 0. This value
# is ignored when plotting "mslp_value", since those are always around 1000.
add_hline_at_zero = True
# how thick to make the lines (1.7 recommended for presentations)
line_width = 1.7
# Setting any of the following to True will set the corresponding
# vertical extents to the values below. If False, extents are automatically
# determined
static_y_limit_track = False
static_y_limit_mslp = False
static_y_limit_maxwind = False
static_y_limit_track_error = False
static_y_limit_mslp_error = False
static_y_limit_maxwind_error = False
# Static settings used if the above are True. Should be a string with 2 words (i.e. "<minVal> <maxVal")
y_limits_track  = "not used"
y_limits_mslp = '0 1200'
y_limits_maxwind = '-100 100'
y_limits_track_error = '0 1200'
y_limits_mslp_error = '0 400'
y_limits_maxwind_error = '-100 100'

[map_settings]
# The extents to use for the map
# This parameter must be set, but it will be ignored if plotting data from grib
# files and the get_extents_from_grib parameter is True
# Note: For track plots, these will always be used since there is no associated grib file
# Units are in degrees and values are arranged in the following order:
#    "southern-lat western-lon northern-lat eastern-lon"
map_extents = "15 -70 40 -35"
# If True, determine the extents from the grib file being plotted rather
# that using the extents specified in map_extents
get_extents_from_grib = True

# How much wider and taller to make maps, beyond the extents specified in the 
# input file. In degrees. Should be a 4-token string 'north west south east'
padding = '0.25 0.25 0.25 0.25'
# projection to use for map. Anything supported by Basemap is acceptable, but changes to the 
# constructor may be needed for anything besides 'cyl'. (List: (http://matplotlib.org/basemap/users/mapsetup.html)
projection = cyl 
# Any resolution value supported by basemap
# -> c (crude), l (low), i (intermediate), h (high), f (full)
resolution = l
# These next few affect what gets drawn in the canvas of the image
# These must all be present or the programs will fail
# lines separaing water from land (i.e. if you want black/white canvas)
draw_coastlines = True
draw_countries = True
draw_map_boundary = False
fill_continents = True
# How frequent, in degrees, to show gridlines for latitude
latitude_line_freq = 5 ; parallels
# How frequent, in degrees, to show gridlines for longitude
longitude_line_freq = 5 ; meridians
# The following two specify where labels are placed on the figure using a 
# binary 4-digit mask (separated by a single white space!).
# The digits correspond to left,right,top,bottom; A '1' means show.
# For lat-lon grids, only two of these are used
latitude_label_mask = 1 0 0 0 ; only show on left
longitude_label_mask = 0 0 0 1 ; only show on bottom
# turquoise ocean
ocean_color = #F0F8FF ; #ccffff ; turquoise ocean
# color to use for lakes inside the continents
lake_color = #99ffff
# color to fill continents with
continents_fill_color = #cc9966
# For track plots, add a marker at this frequency to indicate progression
# through time. Set to <1 to disable this feature 
track_plot_time_indicator_freq = 86400 ; indicate every 24hr -> 24*3600=86400
# When there are multiple experiments (i.e. first 4 sections of this config file), how do we want to plot them?
# Current options are 
#  1. 'subplot' ( a grid of plots will be created on a single image
#  2. 'separate_files' - a separate file is created for each image
comparison_method = subplot

[gsi_settings]
# Name of GSI analysis directory
gsi_analysis_dirname = GSI_ANALYSIS
# Name of GSI firstguess directory (for EnKF experiments, DAFFY defaults to 'GSI_OF')
gsi_ges_dirname = GSI_ANALYSIS
# List of observations to include in the diagnostic. Either put comma separated values consisting of the 
# "tag" used by GSI or set to "all" to include all diagnostic files found in the gsi_analysis/ges directory,
# based on known naming convention
# observations_to_include = amsua_n18, conv, airs_aqua
observations_to_include = all 
# path to GSI used for the experiment 
gsi_path = /home/Javier.Delgado/apps/gsi/comgsi/3.3
# path to reader for conventional obs
gsi_diag_reader_conv = %(gsi_path)/util/Analysis_Utilities/read_diag/read_diag_conv.exe
# path to reader for radiance obs
gsi_diag_reader_rad = %(gsi_path)/util/Analysis_Utilities/read_diag/read_diag_rad.exe
