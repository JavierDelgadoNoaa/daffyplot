Nicely formatted version of this README:
  https://docs.google.com/a/noaa.gov/document/d/1Onf-yD24jhMbbjUhafO5rLhiEZCDJpnrHT0OVowXEK4/


INTRODUCTION


DaffyPlot consists of classes and scripts for creating plots from data generated by DAFFY.  The included classes encapsulate the retrieval of TC vitals and performance-related statistics  produced by the experiments (assuming the postprocessing is set to run). Several scripts are included that produce typical plots and also serve as examples of how to use the API. This document is separated into two sections: An overview of how to use the included plotting scripts and some documentation of the API for generating custom plots.


 --------------------------------------
I. Included plotting scripts


A variety of plotting scripts are included. The general usage is “./script_name.py -c <config file>”. If no config file is passed, “default.cfg” is used. See the CONFIG_FILE section for details of the config file. Other command line options will be added in the future to override configuration file values.  In cases where the script file name is not self-explanatory, you can view the comments at the top of the source code or execute the script with the “-h” option.


CONFIG_FILE
The generated plots are driven by the configuration file, which specifies the datasets to plot, their corresponding line styles, and several other plotting-related options, such as whether to include values for the “truth”, whether or not to include flagged values for TC Vitals statistics plots, what tracker to use, how to decorate maps, etc.
The included “sample.cfg” contains comments for all the supported options. The parser for this configuration file consists of the following set of rules:
* Sections are separated using headers within brackets
* The “#” or “;” symbols are used for comments. But only either at the beginning of a line or surrounded by white space. 
* Quotation marks are passed on when setting a parameter, so do NOT wrap values inside quotes unless specified. The configuration parser will ignore quotations in the plot_colors section, so it is okay to use them there. This was done because most editors’ syntax highlighters will treat the hash mark as a comment, which makes it difficult to read the file.
 In order to support plotting an arbitrary number of experiments, the first four sections (dataset_names, dataset_paths, plot_colors, line_styles)  take arbitrarily-named parameters that specify the dataset names, their paths, the colors to use when plotting them, and the line styles. The parameter names used do not matter to DaffyPlot, it will read all values stored in each section. But the number of entries for each of these first four sections should be the same. The remainder of the config file should be self-explanatory after reading the comments for each parameter.


GENERAL INFORMATION
The best way to understand the scripts is to simply read through the source code. Most of them are just a few lines long. The general idea is to create an instance of some DaffyPlotHelper, iterate through the datasets to call the desired plotting method, call any additional plot-wide decorating methods, and save the figure. 
Note that the parsing of the command line options (and hence the config file) are encapsulated by the DaffyPlotHelper, in order to keep the high level plotting scripts as concise as possible.
-------------
I. The DaffyPlot API

The main classes of DaffyPlot are:
1. DaffyExperimentDataset - Encapsulate information about an experiment
2. DaffyPlotConfig - Encapsulates the configuration (i.e. datasets to include, colors for the plots, and various other options)
3. DaffyPlotHelper - Encapsulates plotting-related functionality


In most cases, only the DaffyPlotHelper is needed. It uses the other two internally. The others may need to be modified if adding functionality (e.g. adding new configuration options or using a tracker that is not currently supported). The DaffyPlotHelper itself is not useful directly - its subclasses provide the functionality specific to the kind of plot being generated. Available subclasses are DaffyTCVPlotHelper, DaffyMapPlotHelper, DaffyTrackPlotHelper, GsiDiagPlotHelper.


DaffyTCVPlotHelper - Encapsulates functionality related to plotting TC statistics. Notable methods include:
* tcv_plot_basic() - This creates a basic plot given x,y coordinates. It’s a wrapper to MPL’s plot(). This is probably not useful directly.
* plot_dataset_metric_vs_fhr() - Plots a given metric’s value versus the forecast hour for a given cycle. The metric can be for the metric’s values or their errors compared to the “truth” specified in the configuration file. The value that will be plotted is determined by the given “metric” parameter. Supported values are “maxwind_value”, “maxwind_error”, “mslp_value”, “mslp_error”, and “track_error”. The values will be obtained using DaffyExperimentDataset::get_tc_error_stats(). All configuration settings will be obeyed in plotting.
* plot_mean_dataset_metric_vs_fhr() - Similar to above, but plots the mean error values. 
DaffyMapPlotHelper - Encapsulates functionality for plotting maps showing different fields. The “map_settings” section of the config file will affect how the maps are decorated.
DaffyTrackPlotHelper - This is a subclass of DaffyMapPlotHelper, it is specifically for plotting track plots.
GsiDiagPlotHelper - Encapsulates functionarlity for plotting GSI diagnostics.


DaffyPlotConfig - This class encapsulates the configuration of an experiment, which is based on the config file it is instantiated with. It stores a list of DaffyExperimentDataset objects in its `datasets` field. It also stores several fields taken from the configuration file, with identical or similar names.


DaffyExperimentDataset - Contains methods to extract various statistics from an experiment. e.g.  for retrieving TC Vitals statistics from output files generated during the DAFFY experiment.


As a final note, looking at the included plotting scripts is the best way to figure out how to create your own plots. Most of them only use the DaffyTCVPlotHelper. The plot_gesproxy_and_analysis.py script shows how you would use more low-level routines to make customized plots (e.g. using only specific output times).






Development Notes:
Since these are not huge datasets, clarity and conciseness were preferred over efficiency. An object-oriented approach was taken, so a basic understanding of OOP is beneficial to understand the code. As performance bottlenecks are found, more efficient implementations (e.g. using Numpy) will be used.
